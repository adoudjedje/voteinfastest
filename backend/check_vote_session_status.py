import firebase_admin
from firebase_admin import credentials, firestore

# Configuration Firebase
cred = credentials.Certificate("firebase-key.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

def check_vote_session_status():
    """V√©rifier le statut de la session de vote"""
    print("üó≥Ô∏è  V√âRIFICATION DU STATUT DE LA SESSION DE VOTE")
    print("=" * 60)
    
    try:
        # R√©cup√©rer la session de vote
        session_doc = db.collection('vote_sessions').document('default_session').get()
        
        if session_doc.exists:
            session_data = session_doc.to_dict()
            print("‚úÖ SESSION DE VOTE TROUV√âE")
            print(f"  Nom: {session_data.get('name', 'N/A')}")
            print(f"  ID: {session_data.get('id', 'N/A')}")
            print(f"  Active: {session_data.get('is_active', 'N/A')}")
            print(f"  Description: {session_data.get('description', 'N/A')}")
            print(f"  Max votes par √©tudiant: {session_data.get('max_votes_per_student', 'N/A')}")
            print(f"  Date de d√©but: {session_data.get('start_date', 'N/A')}")
            print(f"  Date de fin: {session_data.get('end_date', 'N/A')}")
            
            # V√©rifier si la session est active
            is_active = session_data.get('is_active', False)
            if is_active:
                print("\n‚úÖ SESSION ACTIVE - Les √©tudiants peuvent voter")
            else:
                print("\n‚ùå SESSION INACTIVE - Les √©tudiants ne peuvent pas voter")
                print("   ‚Üí C'est probablement la cause de l'erreur!")
                
        else:
            print("‚ùå AUCUNE SESSION DE VOTE TROUV√âE")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def check_backend_connection():
    """V√©rifier la connexion au backend"""
    print(f"\nüîå V√âRIFICATION DE LA CONNEXION BACKEND")
    print("-" * 40)
    
    try:
        # V√©rifier si le backend Flask est accessible
        import requests
        import socket
        
        # V√©rifier l'IP locale
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        print(f"  IP locale: {local_ip}")
        
        # Essayer de se connecter au backend
        try:
            response = requests.get(f"http://{local_ip}:5000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Backend accessible")
            else:
                print(f"‚ùå Backend r√©pond avec code: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Backend non accessible: {e}")
            
    except ImportError:
        print("‚ö†Ô∏è  Module 'requests' non install√©")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification backend: {e}")

def check_firebase_connection():
    """V√©rifier la connexion Firebase"""
    print(f"\nüî• V√âRIFICATION DE LA CONNEXION FIREBASE")
    print("-" * 40)
    
    try:
        # Tester la connexion Firebase
        test_doc = db.collection('test_connection').document('test').get()
        print("‚úÖ Connexion Firebase OK")
        
        # V√©rifier les collections principales
        collections = ['etudiants', 'candidates', 'votes', 'vote_sessions']
        for collection_name in collections:
            try:
                docs = list(db.collection(collection_name).limit(1).stream())
                print(f"  ‚úÖ Collection '{collection_name}': {len(docs)} document(s)")
            except Exception as e:
                print(f"  ‚ùå Collection '{collection_name}': Erreur - {e}")
                
    except Exception as e:
        print(f"‚ùå Erreur connexion Firebase: {e}")

def check_student_login_process(matricule):
    """Simuler le processus de connexion d'un √©tudiant"""
    print(f"\nüë§ SIMULATION DE CONNEXION √âTUDIANT: {matricule}")
    print("-" * 50)
    
    try:
        # √âtape 1: V√©rifier si l'√©tudiant existe
        student_doc = db.collection('etudiants').document(matricule).get()
        if not student_doc.exists:
            print("‚ùå √âtape 1: √âtudiant non trouv√©")
            return False
        print("‚úÖ √âtape 1: √âtudiant trouv√©")
        
        # √âtape 2: V√©rifier si la session est active
        session_doc = db.collection('vote_sessions').document('default_session').get()
        if not session_doc.exists:
            print("‚ùå √âtape 2: Session de vote non trouv√©e")
            return False
            
        session_data = session_doc.to_dict()
        if not session_data.get('is_active', False):
            print("‚ùå √âtape 2: Session de vote inactive")
            return False
        print("‚úÖ √âtape 2: Session de vote active")
        
        # √âtape 3: V√©rifier si l'√©tudiant a d√©j√† vot√©
        votes = db.collection('votes').where('student_matricule', '==', matricule).where('is_valid', '==', True).stream()
        vote_list = list(votes)
        
        if vote_list:
            print("‚ùå √âtape 3: √âtudiant a d√©j√† vot√©")
            return False
        print("‚úÖ √âtape 3: √âtudiant n'a pas encore vot√©")
        
        print("‚úÖ TOUTES LES √âTAPES VALID√âES - Connexion autoris√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur simulation: {e}")
        return False

def activate_vote_session():
    """Activer la session de vote"""
    print(f"\nüîì ACTIVATION DE LA SESSION DE VOTE")
    print("-" * 40)
    
    try:
        # Activer la session
        db.collection('vote_sessions').document('default_session').update({
            'is_active': True,
            'updated_at': firestore.SERVER_TIMESTAMP
        })
        print("‚úÖ Session de vote activ√©e!")
        print("   Les √©tudiants peuvent maintenant se connecter et voter.")
        
    except Exception as e:
        print(f"‚ùå Erreur activation: {e}")

def main():
    matricule_test = "24-11661"
    
    print("üîç DIAGNOSTIC COMPLET DE L'ERREUR DE CONNEXION")
    print("=" * 70)
    
    # V√©rifier le statut de la session
    check_vote_session_status()
    
    # V√©rifier les connexions
    check_firebase_connection()
    check_backend_connection()
    
    # Simuler le processus de connexion
    can_connect = check_student_login_process(matricule_test)
    
    print(f"\n" + "="*70)
    print("üìã DIAGNOSTIC FINAL:")
    print("-" * 30)
    
    if can_connect:
        print("‚úÖ L'√©tudiant devrait pouvoir se connecter")
        print("   Le probl√®me vient probablement du frontend ou du r√©seau")
    else:
        print("‚ùå L'√©tudiant ne peut pas se connecter")
        print("   Probl√®me identifi√© dans le processus de validation")
    
    print(f"\nüí° SOLUTION RECOMMAND√âE:")
    print("-" * 30)
    print("1. Activer la session de vote si elle est inactive")
    print("2. V√©rifier la connexion r√©seau")
    print("3. Red√©marrer le backend Flask")
    print("4. V√©rifier les logs du frontend")
    
    # Demander si on veut activer la session
    response = input(f"\nVoulez-vous activer la session de vote? (oui/non): ").lower().strip()
    if response in ['oui', 'o', 'yes', 'y']:
        activate_vote_session()

if __name__ == "__main__":
    main() 