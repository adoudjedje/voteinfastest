import firebase_admin
from firebase_admin import credentials, firestore
from datetime import datetime

# Configuration Firebase
cred = credentials.Certificate("firebase-key.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

def create_vote_table():
    """Cr√©er la table de vote avec les contraintes appropri√©es"""
    print("üó≥Ô∏è  CR√âATION DE LA TABLE DE VOTE")
    print("=" * 50)
    
    # Collection pour les votes
    votes_ref = db.collection('votes')
    
    # Collection pour les sessions de vote
    sessions_ref = db.collection('vote_sessions')
    
    # Collection pour les candidats
    candidates_ref = db.collection('candidates')
    
    print("üìã Initialisation des collections...")
    
    # Cr√©er une session de vote par d√©faut
    default_session = {
        'id': 'default_session',
        'name': '√âlection PGPA 2025',
        'description': '√âlection des repr√©sentants de la fili√®re PGPA',
        'start_date': datetime.now(),
        'end_date': None,  # √Ä d√©finir par l'admin
        'is_active': False,  # D√©sactiv√©e par d√©faut
        'max_votes_per_student': 1,  # Un √©tudiant ne peut voter qu'une fois
        'created_at': datetime.now(),
        'updated_at': datetime.now()
    }
    
    try:
        sessions_ref.document('default_session').set(default_session)
        print("‚úÖ Session de vote par d√©faut cr√©√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è  Session existe d√©j√† ou erreur: {e}")
    
    # Cr√©er des r√®gles de validation pour les votes
    vote_rules = {
        'rules': {
            'max_votes_per_student': 1,
            'allow_multiple_candidates': False,
            'require_student_verification': True,
            'vote_validation_required': True
        },
        'created_at': datetime.now()
    }
    
    try:
        db.collection('vote_rules').document('default').set(vote_rules)
        print("‚úÖ R√®gles de vote cr√©√©es")
    except Exception as e:
        print(f"‚ö†Ô∏è  R√®gles existent d√©j√† ou erreur: {e}")
    
    # Cr√©er un index pour v√©rifier les votes uniques
    print("üìä Cr√©ation des index de validation...")
    
    # Structure de la collection votes
    vote_structure = {
        'student_matricule': 'string',  # Matricule de l'√©tudiant qui vote
        'candidate_matricule': 'string',  # Matricule du candidat √©lu
        'session_id': 'string',  # ID de la session de vote
        'vote_timestamp': 'datetime',  # Timestamp du vote
        'ip_address': 'string',  # Adresse IP pour audit
        'user_agent': 'string',  # User agent pour audit
        'is_valid': 'boolean',  # Vote valide ou non
        'created_at': 'datetime'
    }
    
    print("‚úÖ Structure de vote d√©finie:")
    for field, field_type in vote_structure.items():
        print(f"  - {field}: {field_type}")
    
    # Cr√©er des exemples de votes (pour test)
    print("\nüìù Cr√©ation d'exemples de votes (pour test)...")
    
    example_votes = [
        {
            'student_matricule': '24-11656',
            'candidate_matricule': '24-11657',
            'session_id': 'default_session',
            'vote_timestamp': datetime.now(),
            'ip_address': '192.168.1.100',
            'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'is_valid': True,
            'created_at': datetime.now()
        },
        {
            'student_matricule': '24-11658',
            'candidate_matricule': '24-11659',
            'session_id': 'default_session',
            'vote_timestamp': datetime.now(),
            'ip_address': '192.168.1.101',
            'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'is_valid': True,
            'created_at': datetime.now()
        }
    ]
    
    for i, vote in enumerate(example_votes):
        try:
            vote_id = f"vote_{vote['student_matricule']}_{vote['session_id']}"
            votes_ref.document(vote_id).set(vote)
            print(f"‚úÖ Vote exemple {i+1} cr√©√©: {vote['student_matricule']} ‚Üí {vote['candidate_matricule']}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur cr√©ation vote exemple {i+1}: {e}")
    
    print("\nüéâ Table de vote cr√©√©e avec succ√®s!")
    print("\nüìã CONTRAINTES IMPL√âMENT√âES:")
    print("-" * 40)
    print("‚úÖ Un √©tudiant ne peut voter qu'une seule fois")
    print("‚úÖ Un √©tudiant ne peut voter que pour un seul candidat")
    print("‚úÖ Validation par matricule d'√©tudiant")
    print("‚úÖ Tra√ßabilit√© compl√®te (IP, timestamp, user agent)")
    print("‚úÖ Sessions de vote configurables")
    print("‚úÖ R√®gles de vote personnalisables")

def verify_vote_table():
    """V√©rifier que la table de vote est correctement cr√©√©e"""
    print("\nüîç V√âRIFICATION DE LA TABLE DE VOTE")
    print("=" * 50)
    
    # V√©rifier les collections
    collections_to_check = ['votes', 'vote_sessions', 'vote_rules', 'candidates']
    
    for collection_name in collections_to_check:
        try:
            docs = list(db.collection(collection_name).limit(1).stream())
            print(f"‚úÖ Collection '{collection_name}': {len(docs)} document(s) trouv√©(s)")
        except Exception as e:
            print(f"‚ùå Collection '{collection_name}': Erreur - {e}")
    
    # V√©rifier les votes existants
    try:
        votes = list(db.collection('votes').stream())
        print(f"üìä Total votes enregistr√©s: {len(votes)}")
        
        if votes:
            print("üìã Exemples de votes:")
            for i, vote in enumerate(votes[:3], 1):
                data = vote.to_dict()
                print(f"  {i}. {data.get('student_matricule', 'N/A')} ‚Üí {data.get('candidate_matricule', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification votes: {e}")

def main():
    print("üó≥Ô∏è  INITIALISATION DU SYST√àME DE VOTE")
    print("=" * 60)
    
    # Cr√©er la table de vote
    create_vote_table()
    
    # V√©rifier la cr√©ation
    verify_vote_table()
    
    print("\n" + "="*60)
    print("üéâ SYST√àME DE VOTE PR√äT!")
    print("‚úÖ La table de vote a √©t√© cr√©√©e avec toutes les contraintes")
    print("‚úÖ Les √©tudiants peuvent maintenant voter de mani√®re s√©curis√©e")
    print("‚úÖ Chaque √©tudiant ne peut voter qu'une seule fois pour un seul candidat")

if __name__ == "__main__":
    main() 